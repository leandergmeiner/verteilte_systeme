version: "3.9"

services:

  nameserver:
    image: "nameserver"
    # To prevent docker from trying to pull the images from docker hub
    pull_policy: never
    container_name: "nameserver"
    networks:
      - verteilte-systeme
    ports:
      - "50051:50051"
    volumes:
      - shared:/logs
    restart: no
    # Healthcheck to make sure service is available before it is requested
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z localhost 50051" ]
      interval: 2s
      timeout: 2s
      retries: 10

  dispatcher:
    image: "dispatcher"
    pull_policy: never
    container_name: "dispatcher"
    networks:
      - verteilte-systeme
    ports:
      - "50052:50052"
    volumes:
      - shared:/logs
    restart: no
    # Start dispatcher when nameserver is already running
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z localhost 50052" ]
      interval: 2s
      timeout: 2s
      retries: 10
    depends_on:
      nameserver:
        condition: service_healthy

  worker1:
    image: "worker"
    pull_policy: never
    container_name: "sum"
    networks:
      - verteilte-systeme
    ports:
      - "50053:50053"
    volumes:
      - shared:/logs
    command: ["sum", "0.0.0.0:50053", "nameserver:50051", "sum:50053"]
    restart: no
    # Start workers when nameserver and dispatcher are already running
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z localhost 50053" ]
      interval: 2s
      timeout: 2s
      retries: 10
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy


  worker2:
    image: "worker"
    pull_policy: never
    container_name: "hash"
    networks:
      - verteilte-systeme
    ports:
      - "50054:50054"
    volumes:
      - shared:/logs
    command: ["hash", "0.0.0.0:50054", "nameserver:50051", "hash:50054"]
    restart: no
    # Start workers when nameserver and dispatcher are already running
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z localhost 50054" ]
      interval: 2s
      timeout: 2s
      retries: 10
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy


  worker3:
    image: "worker"
    pull_policy: never
    container_name: "reverse"
    networks:
      - verteilte-systeme
    ports:
      - "50055:50055"
    volumes:
      - shared:/logs
    command: ["reverse", "0.0.0.0:50055", "nameserver:50051", "reverse:50055"]
    restart: no
    # Start workers when nameserver and dispatcher are already running
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z localhost 50055" ]
      interval: 2s
      timeout: 2s
      retries: 10
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy


  worker4:
    image: "worker"
    pull_policy: never
    container_name: "strlen"
    networks:
      - verteilte-systeme
    ports:
      - "50056:50056"
    volumes:
      - shared:/logs
    command: ["strlen", "0.0.0.0:50056", "nameserver:50051", "strlen:50056"]
    restart: no
    # Start workers when nameserver and dispatcher are already running
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z localhost 50056" ]
      interval: 2s
      timeout: 2s
      retries: 10
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy

  worker5:
    image: "worker"
    pull_policy: never
    container_name: "floor"
    networks:
      - verteilte-systeme
    ports:
      - "50057:50057"
    volumes:
      - shared:/logs
    command: ["floor", "0.0.0.0:50057", "nameserver:50051", "floor:50057"]
    restart: no
    # Start workers when nameserver and dispatcher are already running
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z localhost 50057" ]
      interval: 2s
      timeout: 2s
      retries: 10
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy

  worker6:
    image: "worker"
    pull_policy: never
    container_name: "softmax"
    networks:
      - verteilte-systeme
    ports:
      - "50058:50058"
    volumes:
      - shared:/logs
    command: ["softmax", "0.0.0.0:50058", "nameserver:50051", "softmax:50058"]
    restart: no
    # Start workers when nameserver and dispatcher are already running
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z localhost 50058" ]
      interval: 2s
      timeout: 2s
      retries: 10
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy

  client1:
    image: "client"
    pull_policy: never
    container_name: "sum-client"
    networks:
      - verteilte-systeme
    volumes:
      - shared:/logs
    restart: no
    command: ["sum", "10", "20", "30", "--name_service_address", "nameserver:50051"]
    # Start client for task sum only when worker for task sum is running
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy
      worker1:
        condition: service_healthy

  client2:
    image: "client"
    pull_policy: never
    container_name: "hash-client"
    networks:
      - verteilte-systeme
    volumes:
      - shared:/logs
    restart: no
    command: ["hash", "Hello World", "--name_service_address", "nameserver:50051"]
    # Start client for task sum only when worker for task sum is running
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy
      worker2:
        condition: service_healthy

  client3:
    image: "client"
    pull_policy: never
    container_name: "reverse-client"
    networks:
      - verteilte-systeme
    volumes:
      - shared:/logs
    restart: no
    command: [ "reverse", "Hello", "World", "--name_service_address", "nameserver:50051" ]
    # Start client for task sum only when worker for task sum is running
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy
      worker3:
        condition: service_healthy

  client4:
    image: "client"
    pull_policy: never
    container_name: "strlen-client"
    networks:
      - verteilte-systeme
    volumes:
      - shared:/logs
    restart: no
    command: ["strlen", "Hello", "World", "--name_service_address", "nameserver:50051"]
    # Start client for task sum only when worker for task sum is running
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy
      worker4:
        condition: service_healthy

  client5:
    image: "client"
    pull_policy: never
    container_name: "floor-client"
    networks:
      - verteilte-systeme
    volumes:
      - shared:/logs
    restart: no
    command: ["floor", "1.5", "2.5", "3.5", "--name_service_address", "nameserver:50051"]
    # Start client for task sum only when worker for task sum is running
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy
      worker5:
        condition: service_healthy

  client6:
    image: "client"
    pull_policy: never
    container_name: "softmax-client"
    networks:
      - verteilte-systeme
    volumes:
      - shared:/logs
    restart: no
    command: ["softmax", "1.2", "0.6", "0.2", "--name_service_address", "nameserver:50051"]
    # Start client for task sum only when worker for task sum is running
    depends_on:
      nameserver:
        condition: service_healthy
      dispatcher:
        condition: service_healthy
      worker6:
        condition: service_healthy

volumes:
  shared:

networks:
  verteilte-systeme:
    external: false
